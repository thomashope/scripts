#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-l] [-p] [-s version]

Options:
  -h, --help      Print this help and exit.
  -l, --list      List found Unity versions.
  -s, --switch    Sets the active Unity version to the given path.
  -p, --path      Prints path to currently selected Unity version.
  -v, --verbose   Print script debug info.
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  flag_list=0
  flag_path=0
  param_select=''

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -l | --list) flag_list=1 ;;
    -p | --path) flag_path=1 ;;
    -s | --switch)
      param_select="${2-}"
      shift
      ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  #[[ -z "${param-}" ]] && die "Missing required parameter: param"
  #[[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

  return 0
}

# make pushd and popd silent
pushd() { command pushd "$@" > /dev/null; }
popd() { command popd "$@" > /dev/null; }

parse_params "$@"
setup_colors

# script logic

print_path()
{
  if [[ -f "${script_dir}/unity" ]]; then
    msg "$(cat ${script_dir}/unity | cut -f2 -d '"')"
  else
    msg "${ORANGE}No Unity version selected${NOFORMAT}"
  fi
}

if [[ flag_path -eq 1 ]]; then
  
  print_path

elif [[ flag_list -eq 1 ]]; then
  
  pushd /Applications/unity
  ls -l1
  popd

elif [[ -n $param_select ]]; then
  
  # TODO: allow the user to pass a full path to the selected unity install

  # Assemble path to Unity install
  unity_path="/Applications/unity/${param_select}/Unity.app/Contents/MacOS/Unity"
  
  # Assemble path to shortcut script
  unity_script_path=${script_dir}/unity
  
  # Write script and make executable
  echo "\"${unity_path}\" \"\$@\"" > ${unity_script_path}
  chmod +x ${unity_script_path}

  msg "Set Unity install to: '${GREEN}${unity_path}${NOFORMAT}'"

else

  usage

fi

